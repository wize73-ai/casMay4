name: PR Comment

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Analyze PR
        id: analyze
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const repo = context.repo;
            const title = pr.title.toLowerCase();
            
            // Define categories for analysis
            const categories = {
              'enhancement': ['feature', 'implement', 'add', 'support', 'enhance'],
              'bug': ['fix', 'bug', 'issue', 'error', 'crash'],
              'documentation': ['doc', 'documentation', 'readme', 'comment'],
              'ci': ['ci', 'workflow', 'github action', 'pipeline'],
              'dependencies': ['dependency', 'dependencies', 'upgrade', 'version'],
              'translation': ['translation', 'language', 'mbart', 'multilingual'],
              'anonymization': ['anonymization', 'anonymize', 'pii', 'privacy'],
              'monitoring': ['health check', 'health-check', 'monitoring', 'readiness', 'liveness', 'probe']
            };
            
            // Collect detected categories
            const detectedCategories = [];
            
            // Check title and body for keywords
            for (const [category, keywords] of Object.entries(categories)) {
              for (const keyword of keywords) {
                if (title.includes(keyword) || (pr.body && pr.body.toLowerCase().includes(keyword))) {
                  detectedCategories.push(category);
                  break;
                }
              }
            }
            
            // Determine PR size
            const additions = pr.additions || 0;
            const deletions = pr.deletions || 0;
            const totalChanges = additions + deletions;
            
            let sizeCategory = 'Extra Small';
            if (totalChanges > 1000) sizeCategory = 'Extra Large';
            else if (totalChanges > 500) sizeCategory = 'Large';
            else if (totalChanges > 100) sizeCategory = 'Medium';
            else if (totalChanges > 30) sizeCategory = 'Small';
            
            // Remove duplicates
            const uniqueCategories = [...new Set(detectedCategories)];
            
            // Create PR analysis comment
            const comment = `## PR Analysis

### Categories
${uniqueCategories.map(cat => `- ${cat}`).join('\n')}

### Size
- **${sizeCategory}** (${additions} additions, ${deletions} deletions)

### Files Changed
- ${pr.changed_files} files modified

### Automated Test Status
- Tests will be run automatically

*This analysis was performed automatically by GitHub Actions.*
`;
            
            // Add comment to PR
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: repo.owner,
              repo: repo.repo,
              body: comment
            });
            
            console.log('PR analysis comment added');
            return { categories: uniqueCategories, size: sizeCategory };