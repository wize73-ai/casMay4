"""
PDF Document Processor for CasaLingua

This module handles extraction of text from PDF documents
and creation of PDFs from processed text using PyMuPDF.
"""

import io
import logging
from typing import Dict, Any, Tuple
import os
ENVIRONMENT = os.getenv("CASALINGUA_ENV", "production").lower()

logger = logging.getLogger("casalingua.core.document.pdf")

try:
    import fitz  # PyMuPDF
except ImportError as e:
    fitz = None
    logger.warning("PyMuPDF (fitz) not available: %s", e)

# PDF backends (safe fallback imports)
try:
    from fpdf import FPDF
except ImportError:
    FPDF = None

PDF_AVAILABLE = fitz is not None and FPDF is not None

class PDFProcessor:
    """
    PDF document processor using PyMuPDF and FPDF.
    """

    def __init__(self, model_manager=None, config: Dict[str, Any] = None):
        self.model_manager = model_manager
        self.config = config or {}

        logger.debug(f"PDFProcessor ready - fitz: {fitz is not None}, FPDF: {FPDF is not None}")
        logger.info("PDF processor initialized")

    async def extract_text(self, content: bytes) -> Tuple[str, Dict[str, Any]]:
        """
        Extract text from a PDF document.

        Args:
            content (bytes): PDF file content

        Returns:
            Tuple[str, Dict[str, Any]]: Extracted text and metadata
        """
        if fitz is None:
            raise ImportError("PyMuPDF (fitz) is required for PDF text extraction but is not installed.")

        try:
            doc = fitz.open(stream=content, filetype="pdf")
            text = ""
            for page in doc:
                text += page.get_text() + "\n"

            metadata = {
                "page_count": len(doc),
                "extracted_with": "PyMuPDF"
            }
            doc.close()

            logger.debug(f"Extracted {len(text)} characters from {metadata['page_count']} pages")
            return text.strip(), metadata

        except Exception as e:
            logger.error(f"Error extracting PDF: {e}", exc_info=True)
            return "", {"error": str(e)}

    async def create_document(self, text: str, metadata: Dict[str, Any] = None) -> bytes:
        """
        Create a PDF document from plain text.

        Args:
            text (str): Text content
            metadata (dict): Optional metadata for the document

        Returns:
            bytes: PDF file content
        """
        if FPDF is None:
            raise ImportError("FPDF is required for PDF creation but is not installed.")

        try:
            pdf = FPDF()
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()
            pdf.set_font("Arial", size=12)

            for line in text.split("\n"):
                pdf.cell(0, 10, txt=line, ln=True)

            buffer = io.BytesIO()
            pdf.output(buffer)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.debug(f"Created PDF document of size {len(pdf_bytes)} bytes")
            return pdf_bytes

        except Exception as e:
            logger.error(f"Error creating PDF: {e}", exc_info=True)
            raise ValueError(f"Failed to create PDF: {str(e)}")

if __name__ == "__main__":
    import asyncio
    logging.basicConfig(level=logging.DEBUG)
    sample_text = "Hello, world!\nThis is a test PDF.\nGenerated by CasaLingua PDFProcessor."
    processor = PDFProcessor()

    # Test PDF creation
    try:
        pdf_bytes = asyncio.run(processor.create_document(sample_text))
        print(f"✅ PDF creation successful. Size: {len(pdf_bytes)} bytes")
    except Exception as e:
        print(f"❌ PDF creation failed: {e}")

    # Test PDF extraction (roundtrip)
    try:
        extracted_text, metadata = asyncio.run(processor.extract_text(pdf_bytes))
        print("✅ PDF extraction successful.")
        print("Extracted Text Preview:")
        print(extracted_text)
        print("Metadata:", metadata)
    except Exception as e:
        print(f"❌ PDF extraction failed: {e}")